#!/usr/bin/env perl
# notifiy-expiring-certs --- A simple e-mail notifier for expiring certificates.
# Copyright (C) 2016  Eric MSP Veith <eveith@veith-m.de>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


use strict;
use warnings;

use DateTime;
use XML::Twig;
use HTTP::Tiny;
use Email::Send;
use Getopt::Std;
use DateTime::Format::Mail;
use Net::Domain qw(hostname hostfqdn hostdomain domainname);


### DEFAULT VALUES:

# How many days should we warn in advance?
our $DEFAULT_DAYS_TO_WARN = 60;

# Where is the PKI server located?
our $DEFAULT_PKI_SERVER = 'https://localhost:8443';

# What mailserver do we use?
our $DEFAULT_SMTP_SERVER = 'localhost';

# Default "MAIL FROM:" address
our $DEFAULT_FROM_ADDRESS = 'certmaster@' . domainname;

# Default recepient if no e-mail address is found:
our $DEFAULT_TO_ADDRESS = 'certmaster@' . domainname;

### DEFAULT_VALUES --- END.


##
# Prints default help message
sub HELP_MESSAGE {
    print "notifiy-expiring-certs - " .
        "A simple e-mail notifier for expiring certificates.\n";
    print "\nOptions:\n\n";
    print "-uURI        PKI server URI (DEFAULT: $DEFAULT_PKI_SERVER)\n";
    print "-mSERVER     Mail server (DEFAULT: $DEFAULT_SMTP_SERVER)\n";
    print "-fFROM       Mail from address (DEFAULT: $DEFAULT_FROM_ADDRESS)\n";
    print "-tTO         Fall-back recepient (DEFAULT: $DEFAULT_TO_ADDRESS)\n";
    print "-dDAYS       Warning period, in days " .
        "(DEFAULT: $DEFAULT_DAYS_TO_WARN)\n";
    print "-h           This help message\n";
}


##
# Parses a XML definition of a certificate and possibly inserts it into the
# known_certs hash.
sub parse_cert_xml {
    my ($known_certs, $xml) = @_;
    my $id = $xml->att('id');

    $xml->name eq 'CertDataInfo' && $id or die "Cannot parse XML twig: $xml\n";

    my $dn = $xml->first_child('SubjectDN')->text;
    my $cert_data = {
        id => $id,
        dn => $dn,
        status => $xml->first_child('Status')->text,
        validity_end => $xml->first_child('NotValidAfter')->text / 1000
    };

    return unless $cert_data->{status} eq 'VALID';

    if ($known_certs->{$dn} 
                && $known_certs->{$dn}{validity_end}
                    < $cert_data->{validity_end}
            || ! $known_certs->{$dn}) {
        $known_certs->{$dn} = $cert_data;
    }
}


# Parse command-line options:

my %opts;
getopts('f:t:m:d:hu:', \%opts);

$opts{'u'} ||= $DEFAULT_PKI_SERVER;
$opts{'m'} ||= $DEFAULT_SMTP_SERVER;
$opts{'t'} ||= $DEFAULT_TO_ADDRESS;
$opts{'f'} ||= $DEFAULT_FROM_ADDRESS;
$opts{'d'} ||= $DEFAULT_DAYS_TO_WARN;

HELP_MESSAGE and exit(0) if $opts{'h'};


# Store DN => data.
my %certs;


for (my $start = 0; $start >= 0; ) {
    my $pki_rest_response = HTTP::Tiny->new->get(
        $opts{'u'} . "/ca/rest/certs?start=$start&size=50&maxResults=-1");

    if (!$pki_rest_response->{success}) {
        print STDERR "Could not contact PKI server at $opts{u} \n";
        print STDERR "Reason given: $pki_rest_response->{status} ".
            "$pki_rest_response->{reason}\n";
        exit(1)
    }

    XML::Twig->new(twig_handlers => {
            'CertDataInfos' => sub {
                if (scalar($_->children) > 2) {
                    $start += 50;
                } else {
                    $start = -1;
                }
            },
            'CertDataInfo' => sub { parse_cert_xml(\%certs, $_) }
        })->parse($pki_rest_response->{content});
} 


my $now = DateTime->now();
my $warn_max = DateTime->now->add(days => $opts{'d'});

foreach my $dn (keys %certs) {
    my $end_date = DateTime->from_epoch(epoch => $certs{$dn}{validity_end});

    next unless ($warn_max->epoch() > $end_date->epoch());

    my $days_to_end = ($end_date->epoch - $now->epoch) / (60*60*24);
    my $record = $certs{$dn};
    my ($cn) = $dn =~ /CN=([^,]+)/;
    my ($email) = $dn =~ /E=([^,]+)/;

    my $subject = sprintf(
        "Your certificate for %s will expire in %d days",
        $cn,
        $days_to_end);
    my $text = "The following certificate will expire in ".
        $days_to_end. " days:\n\n".
        "    Subject DN: ". $dn. "\n".
        "    Serial Number: ". $record->{id}. "\n".
        "    Not Valid Valid After: $end_date";
    my $message = "To: " . ($email || $opts{'t'}) . "\n".
        "From: " . $opts{'f'} . "\n".
        "Date: ". DateTime::Format::Mail->format_datetime($now). "\n".
        "Subject: ". $subject. "\n\n".
        $text;

    my $sender = Email::Send->new({mailer => 'SMTP'});
    $sender->mailer_args([Host => $opts{'m'}]);
    $sender->send($message);
}

